<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	<!-- 회원가입 -->
	<insert id="insert" parameterType="uVO" useGeneratedKeys="true"
		keyProperty="CLIENT_NUM">
		insert into MEMBER_T(ID,
		<if test="PW != null and PW != ''">
			PW,
		</if>
		<if test="TEMP_PW != null and TEMP_PW != ''">
			TEMP_PW,
		</if>
		<if test="M_NAME != null and M_NAME != ''">
			M_NAME,
		</if>
		NICKNAME, MAIL, BIRTH,
		<if test="PHONE != null and PHONE != ''">
			PHONE,
		</if>
		<if test="ADDR != null and ADDR != ''">
			ADDR,
		</if>
		IN_TIME,
		<if test="EMAIL_ST != null and EMAIL_ST != ''">
			EMAIL_ST,
		</if>
		<if test="OUT_TIME != null and OUT_TIME != ''">
			OUT_TIME,
		</if>
		OUT_ST
		)
		values(
		#{ID}, #{PW},
		<if test="TEMP_PW != null and TEMP_PW != ''">
			#{TEMP_PW},
		</if>
		#{M_NAME}, #{NICKNAME}, #{MAIL}, #{BIRTH}, #{PHONE},
		<if test="ADDR != null and ADDR != ''">
			#{ADDR},
		</if>
		SYSDATE(),
		<if test="EMAIL_ST != null and EMAIL_ST != ''">
			#{EMAIL_ST},
		</if>
		<if test="OUT_TIME != null and OUT_TIME != ''">
			#{OUT_TIME},
		</if>
		1
		)
	</insert>
	<!-- 아이디 중복체크 -->
	<select id="idCheck" parameterType="String" resultType="int">
		SELECT
		COUNT(*) FROM MEMBER_T
		WHERE ID = #{ID}
	</select>

	<!-- 닉네임 중복체크 -->
	<select id="nickCheck" parameterType="String" resultType="int">
		SELECT
		COUNT(*) FROM MEMBER_T
		WHERE NICKNAME = #{NICKNAME}
	</select>
	<!-- 비밀번호 중복체크 -->
	<select id="pwCheck" parameterType="map" resultType="int">
		SELECT
		COUNT(*) FROM MEMBER_T
		WHERE CLIENT_NUM = #{CLIENT_NUM} AND PW = #{PW}
	</select>

	<!-- 로그인 -->
	<select id="selectPwd" parameterType="String" resultType="uVO">
		select
		* from MEMBER_T where ID = #{ID}
	</select>

	<!-- sns 로그인 -->
	<select id="emailCheck" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM MEMBER_T
		WHERE MAIL = #{MAIL}
	</select>

	<!-- sns 가입 -->
	<select id="snslogin" parameterType="uVO">
		insert into MEMBER_T(ID,
		<if test="PW != null and PW != ''">
			PW,
		</if>
		<if test="PW == null or PW == ''">
			PW,
		</if>
		<if test="TEMP_PW != null and TEMP_PW != ''">
			TEMP_PW,
		</if>
		M_NAME, NICKNAME, MAIL,
		<if test="BIRTH != null and BIRTH != ''">
			BIRTH,
		</if>
		<if test="PHONE != null and PHONE != ''">
			PHONE,
		</if>
		<if test="ADDR != null and ADDR != ''">
			ADDR,
		</if>
		IN_TIME,
		<if test="EMAIL_ST != null and EMAIL_ST != ''">
			EMAIL_ST,
		</if>
		<if test="OUT_TIME != null and OUT_TIME != ''">
			OUT_TIME,
		</if>
		OUT_ST
		)
		values(#{ID},

		<if test="PW != null and PW != ''">
			#{PW},
		</if>
		<if test="PW == null or PW == ''">
			'defaultPassword',
		</if>

		<if test="TEMP_PW != null and TEMP_PW != ''">
			#{TEMP_PW},
		</if>

		#{M_NAME}, #{NICKNAME}, #{MAIL},

		<if test="BIRTH != null and BIRTH != ''">
			#{BIRTH},
		</if>

		<if test="PHONE != null and PHONE != ''">
			#{PHONE},
		</if>

		<if test="ADDR != null and ADDR != ''">
			#{ADDR},
		</if>

		SYSDATE(),

		<if test="EMAIL_ST != null and EMAIL_ST != ''">
			#{EMAIL_ST},
		</if>

		<if test="OUT_TIME != null and OUT_TIME != ''">
			SYSDATE(),
		</if>
		1
		)
	</select>

	<!-- 유저업데이트 -->
	<update id="userUpdate" parameterType="uVO">
		UPDATE MEMBER_T
		<set>
			<if test="PW != null">PW = #{PW},</if>
			<if test="NICKNAME != null">NICKNAME = #{NICKNAME},</if>
			<if test="PHONE != null">PHONE = #{PHONE},</if>
			<if test="BIRTH != null">BIRTH = #{BIRTH},</if>
			<if test="MAIL != null">MAIL = #{MAIL},</if>
			<if test="ADDR != null">ADDR = #{ADDR},</if>
			<if test="EMAIL_ST != null">EMAIL_ST = #{EMAIL_ST},</if>
		</set>
		WHERE ID = #{ID}
	</update>

	<!-- ID와 비밀번호 모두를 사용한 중복 여부 확인 -->
	<select id="isPwDuplicate" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM MEMBER_T
		WHERE PW = #{PW} AND ID = #{ID}
	</select>
	<!-- 탈퇴용 업뎃 -->
	<update id="userOut">
		UPDATE MEMBER_T
		SET OUT_ST = 0, OUT_TIME = SYSDATE()
		WHERE ID = #{ID}
	</update>
	<!-- 이름과 이메일로 아이디만 찾기 -->
	<select id="getIdByNameAndMail" resultType="uVO">
		SELECT ID FROM MEMBER_T WHERE MAIL = #{MAIL} AND M_NAME = #{M_NAME}
	</select>
	<!-- 이름과 아이디로 유저이메일만 찾기 -->
	<select id="getMailByIdAndName" resultType="uVO">
		SELECT MAIL FROM MEMBER_T WHERE ID = #{ID} AND MAIL = #{MAIL}
	</select>
	<!-- 유저의 TEMP_PW 필드 update! -->
	<insert id="upsertTempPW">
		UPDATE MEMBER_T SET TEMP_PW = #{TEMP_PW} WHERE ID = #{ID};
	</insert>
	<!-- 유저의 TEMP_PW 필드 비우기 -->
	<update id="resetTempPW">
		UPDATE MEMBER_T SET TEMP_PW = NULL WHERE ID = #{ID};
	</update>
</mapper>









